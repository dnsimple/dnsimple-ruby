# This is the DNSimple organization-wide RuboCop configuration.
# It defines our unified linting and coding standards for all Ruby projects,
# in accordance with our Ruby development practices and guidelines.
#
# This template is maintained centrally in the infra-github repository:
# https://github.com/dnsimple/infra-github/blob/main/workspace/templates/ruby/rubocop_dnsimple.yml
#
# For details on RuboCop itself and its configuration options, refer to:
# https://docs.rubocop.org/rubocop/

AllCops:
  Exclude:
    # Exclude .gemspec files because they are generally auto-generated
    - '*.gemspec'
  NewCops: enable

# Generally, the keyword style uses a lot of space. This is particularly true when
# you use case/if statements, in combination with a long-name variable.
#
#   invoice_error_message = case error
#                           when 1 == 1
#                             do_something
#                           else
#                             do_else
#                           end
#
Layout/EndAlignment:
  EnforcedStyleAlignWith: variable

Layout/LineLength:
  Enabled: false
  Max: 100

# [codesmell]
Lint/SuppressedException:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

# [codesmell]
Metrics/BlockLength:
  Enabled: false

# [codesmell]
Metrics/CyclomaticComplexity:
  Enabled: false
  Exclude:
    - 'spec/**/*_spec.rb'
    - 'test/**/*_test.rb'

Metrics/ClassLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

# [codesmell]
Metrics/ModuleLength:
  Enabled: false
  Exclude:
    - 'spec/**/*_spec.rb'
    - 'test/**/*_test.rb'

# [codesmell]
Metrics/ParameterLists:
  Enabled: false
  Max: 5

# [codesmell]
Metrics/PerceivedComplexity:
  Enabled: false

# We tend to use @_name to represent a variable that is memoized,
# but it should not be accessed directly and kept as private.
Naming/MemoizedInstanceVariableName:
  Enabled: false

# We use it from time to time, as it's not always possible (or maintainable)
# to use simple ? methods.
# Moreover, it's actually more efficient to not-use predicates:
# https://github.com/bbatsov/rubocop/issues/3633
Naming/PredicatePrefix:
  Enabled: false

# The team agreed decided to use exception.
Naming/RescuedExceptionsVariableName:
  PreferredName: 'exception'

# This cop triggers several false positives that make sense in our domain model.
# For instance, ip is considered an uncommunicative parameter name:
#
#   ipv4_to_arpa_name(ip)
#
Naming/MethodParameterName:
  Enabled: false

Style/AccessorGrouping:
  Enabled: true
  EnforcedStyle: separated

# Do not use "and" or "or" in conditionals, but for readability we can use it
# to chain executions. Just beware of operator order.
Style/AndOr:
  EnforcedStyle: conditionals

# No specific reason, except that %q() is easier to grep than %()
Style/BarePercentLiterals:
  EnforcedStyle: percent_q

# Pick one option for consistency.
Style/BlockDelimiters:
  EnforcedStyle: braces_for_chaining
  AllowedMethods:
    - expect

# Warn on empty else.
Style/EmptyElse:
  EnforcedStyle: empty

# Pick one option for consistency.
Style/EmptyMethod:
  EnforcedStyle: expanded

# We don't care about the format style.
# In most cases we use %, but not at the point we want to enforce it
# as a convention in the entire code.
Style/FormatString:
  Enabled: false

# Annotated tokens (like %<foo>s) are a good thing, but in most cases we don't need them.
# %s is a simpler and straightforward version that works in almost all cases. So don't complain.
Style/FormatStringToken:
  Enabled: false

# always - forces use of the 3.1 syntax (e.g. foo:)
# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashSyntax
Style/HashSyntax:
  EnforcedShorthandSyntax: always
  Exclude:
    # Rakefiles generally have definitions like
    #   :default => :test
    # that looks nicer with the old rocket syntax.
    - 'Rakefile'

# We want to be able to decide when to use one-line if/unless modifiers.
Style/IfUnlessModifier:
  Enabled: false

# [codesmell]
# It's not always that bad.
Style/IfInsideElse:
  Enabled: false

# module_function doesn't respect the visibility of the methods,
# and doesn't work well when the module contains both public/private methods.
Style/ModuleFunction:
  Enabled: false

Style/MultilineBlockChain:
  Exclude:
    # RSpec uses multi-line blocks for certain features
    - 'spec/**/*_spec.rb'

# unless is not always cool.
Style/NegatedIf:
  Enabled: false

# Magic numbers are not welcomed.
Style/NumericLiterals:
  Exclude:
    # however tests can use numeric literals for method calls,
    # without the need to define a variable just for that.
    - 'spec/**/*_spec.rb'
    - 'test/**/*_test.rb'

# Enable but only for multiple returns value.
#
#   return foo, bar
#
# reads much better than
#
#   [foo, bar]
#
Style/RedundantReturn:
  AllowMultipleReturnValues: true

# This is quite annoying, especially in cases where we don't control it (e.g. schema.rb).
Style/SymbolArray:
  Enabled: false

# We don't have a preference.
Style/SpecialGlobalVars:
  Enabled: false
  EnforcedStyle: use_perl_names

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# Be consistent. The trailing comma also allows easy reordering,
# and doesn't cause a diff in Git when you add a line to the bottom.
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma

# Be consistent. The trailing comma also allows easy reordering,
# and doesn't cause a diff in Git when you add a line to the bottom.
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma

Style/TrivialAccessors:
  # IgnoreClassMethods because I want to be able to define class-level accessors
  # that sets an instance variable on the metaclass, such as:
  #
  #    def self.default=(value)
  #      @default = value
  #    end
  #
  IgnoreClassMethods: true

Style/WordArray:
  EnforcedStyle: percent
  MinSize: 3

# For the same reason of EndAlignment, aligning with the case may have a bad impact
# on a case after a very long variable.
#
#   invoice_error_message = case error
#                           when 1 == 1
#                             do_something
#                           else
#                             do_else
#                           end
#
Layout/CaseIndentation:
  EnforcedStyle: end

# This is quite buggy, as it doesn't recognize double lines.
Layout/EmptyLines:
  Enabled: false

Layout/EmptyLineBetweenDefs:
  NumberOfEmptyLines: [1, 2]

Layout/EmptyLinesAroundBlockBody:
  Exclude:
    # RSpec is all made of blocks. Disable this config in RSpec
    # to be consistent with EmptyLinesAroundClassBody and EmptyLinesAroundModuleBody
    - 'spec/**/*_spec.rb'
    - 'test/**/*_test.rb'

# We're ok with it. We use it quite often for method-level rescue statements.
Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Enabled: false

# Multi-line differs from standard indentation, they are indented twice.
Layout/FirstArgumentIndentation:
  IndentationWidth: 4

# Array indentation should be consistent with method/variable definition.
Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

# Hash indentation should be consistent with method/variable definition.
Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

# Multi-line differs from standard indentation, they are indented twice.
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented
  IndentationWidth: 4

# Multi-line differs from standard indentation, they are indented twice.
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented
  IndentationWidth: 4

# Sorry, but using trailing spaces helps readability.
#
#   %w( foo bar )
#
# looks better than:
#
#   %w(foo bar)
#
Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: false
